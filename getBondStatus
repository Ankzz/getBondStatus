#!/usr/bin/perl -w

=head

Utility to query regarding a bonded interface

author= <ankzzdev>AT<gmail.com>

bugs!! Any ??? I don't hope so!

Wish me to add a few more options, sure mail me!!

Utilize this code for usage. :-P Don't blame if
something does not works out. Just shoot a mail.

License: I will get one

=cut

use strict;
use warnings;

# To support command line options
use Getopt::Long qw(:config no_ignore_case);

my $module ="getBondStatus ";
my $moduleversion = "1.01";

# My variables; Lets the module speak out loud
my $verbose = 0;

# Alas!! I hope you do not need to use this
my $debug = 0;
my $really = 0;

# B-) Directory
my $BOND="/proc/net/bonding/";

# Utility method
sub trim($)
{
    my $string = shift;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}

sub dumpit($)
{
    return unless $debug eq 1 and $really eq 1;
    my $param = shift;
    return unless defined $param;
    use Data::Dumper;
    print STDOUT Dumper(\$param);
}

sub get_bonded_interfaces {

    return undef unless -d $BOND;

    opendir (DIR, $BOND) or return undef;

    my @bonds = ();
    while (my $file = readdir(DIR)) {
        next if $file eq "." or $file eq "..";
        push @bonds,$file;
    }
   
    print STDOUT "Bonds: ", join(' ',@bonds) ,"\n" if $verbose eq 1;

    return \@bonds;
}

sub _get_bonded_interfaces {
    $verbose = 1;
    get_bonded_interfaces();
    $verbose = 0;
}

sub get_inf_speed_in_mbps($$) {
    my $speed = shift;
    my $unit = shift;

    if( $unit eq "Kbps" ) {
       $speed /= 1000;
    }
    if( $unit eq "Gbps" ) {
       $speed *= 1000;
    }

    return $speed;
}

sub normalize_speed_unit($$) {
    my $speed = shift;
    my $unit = shift;

    if($speed >= 1000) {
       $speed /= 1000;
       $unit = "Gbps";
    }
    elsif ($speed <= 1) {
       $speed *= 1000;
       $unit = "Kbps";
    }
    return $speed." ".$unit;
}

sub get_bond_capabilityi($) {
    my $inf = shift;

    return undef unless defined $inf;

    my %cap = ();

    my @status = `cat $BOND$inf 2>/dev/null`;

    unless ( defined $status[0] ) {

        print STDOUT "Invalid bond name\n";
        return;
    }
    print STDOUT @status,"\n" if $debug eq 1;

    my $slave_count =0;
    my $bond_speed=0;
    my $bond_speed_unit="Mbps";

    foreach my $line (@status) {
        my $prefix="";

        print STDOUT "I:",$line,"\n" if $debug eq 1;

        my ($key,$value) = split(":",$line, 2);
        $key = trim($key);
        $value = trim($value) if defined $value;

        next if $key eq "";

        print STDOUT $key,":",$value,"\n" if $debug eq 1;

        # Parse the output
        if ( $line =~ m/Slave Interface/ ) {
            $prefix="Slave ";
            $slave_count++;
        }

        if( $prefix eq "Slave " ) {
            $cap{$prefix.$slave_count}{$key} = (defined $value)?$value:"NA";
            if ( $key =~ m/Speed/ ) {
                my ($speed,$unit) = split(" ",$value);
                $speed = int($speed);
                print STDOUT $cap{$prefix.$slave_count}{'Slave Interface'},": Speed: ",$speed.$unit,"\n" if $debug eq 1;
                $bond_speed += get_inf_speed_in_mbps($speed, $unit);
            }
        } else {
            $cap{$key} = (defined $value)?$value:"NA";
        }
    }
    $cap{slave_count} = $slave_count;
    $cap{speed} = normalize_speed_unit($bond_speed, $bond_speed_unit);
    dumpit(\%cap) if $debug eq 1;

    if ($verbose eq 1 ){
        while (my($key, $value) = each(%cap)){
            print STDOUT "    ".$key.": ".$value."\n" unless (ref($value) eq "HASH") ;
            if (ref($value) eq "HASH") {
               print "    ",$key," => \n";
               while (my($subkey, $val) = each(%{$value})){
                   print STDOUT "        ";
                   print STDOUT $subkey.": ".$val."\n" unless (ref($val) eq "HASH") ;
               }
            }
        }
    }
    return \%cap;
}

sub Usage {
    print STDOUT "Usage:",$module," [OPTIONS] [COMMANDS]\n";
    print STDOUT "OPTIONS:\n";
    print STDOUT "         -d           : To debug this tool\n";
    print STDOUT "         -v           : To set verbose\n";
    print STDOUT "\n";
    print STDOUT "COMMANDS:\n";
    print STDOUT "         -i <bondname>: To list the specified bond's capability\n";
    print STDOUT "         -l           : To list all the bonds on the system\n";
    print STDOUT "         -s           : Get the bond Speed\n";
    print STDOUT "         -S           : Get status of bonded interface\n";
    print STDOUT "         -V           : Get the version of $module\n"
}

sub print_module_version()
{
  print STDOUT $module," version ",$moduleversion,"\n";
}

sub _get_bond_capability()
{
  print STDOUT "Called for @_\n" if $debug eq 1;

  my ($option, $value) = @_;

  OPTION : {
      $option eq 'i' and do {
         $verbose = 1;
         get_bond_capabilityi($value) if defined( $value );
         $verbose = 0;
         last OPTION;
      };
      $option eq 's' and do {
         my $cap = get_bond_capabilityi($value) if defined( $value );
         if (exists $cap->{'speed'}) {
          print STDOUT $value,": ",$cap->{'speed'},"\n";
         } else {
          print STDOUT $value,": Unknown (speed)\n"
         }
         last OPTION;
      };
      $option eq 'S' and do {
         my $cap = get_bond_capabilityi($value) if defined( $value );
         if (exists $cap->{'MII Status'}) {
          print STDOUT $value,": ",$cap->{'MII Status'},"\n";
         }else {
          print STDOUT $value,": Unknown (MII Status)\n"
         }
         last OPTION;
      };
  }
}

sub main {
    if(@ARGV < 1) { Usage; return; }
    GetOptions ('h' => \&Usage, 'd' => \$debug, 'i=s' => \&_get_bond_capability,
                's=s' => \&_get_bond_capability, 'S=s' => \&_get_bond_capability,
                'l' => \&_get_bonded_interfaces,
                'v' => \$verbose, 'V' => \&print_module_version
               );
}

main;
